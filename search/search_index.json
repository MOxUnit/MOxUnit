{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"MOxUnit testing framework","text":"<p>MOxUnit is a lightweight testing framework for Matlab and GNU Octave, comprised of</p> <ul> <li>MOxUnit: the testing framework itself</li> <li>MOcov: an optional toolboxe for coverage</li> <li>MOdox: an optional toolboxe for testing 'doc strings'</li> </ul> <p>This whole framework is distributed under the MIT license, a permissive free software license.</p>"},{"location":"acknowledgements.html","title":"Acknowledgements","text":"<ul> <li>The object-oriented class structure was inspired by the Python unit test framework.</li> <li>The <code>assert*</code> function signatures are aimed to be compatible with Steve Eddin's Matlab xUnit test framework.</li> </ul>"},{"location":"acknowledgements.html#projects-that-use-moxunit-and-mocov","title":"Projects that use MOxUnit and MOcov","text":"<ul> <li> <p>CoSMoMVPA:     A multi-modal, multi-variate pattern analysis (MVPA) toolbox in Matlab / GNU Octave for cognitive neuroscientists.</p> </li> <li> <p>bids-matlab:     MATLAB / Octave tools for BIDS datasets.</p> </li> <li> <p>bidspm:     A toolbox to perform MRI data analysis on BIDS datasets using SPM12.</p> </li> <li> <p>ONSAS: an Open Nonlinear Structural Analysis Solver.</p> </li> </ul>"},{"location":"contact.html","title":"Contact","text":"<p>Nikolaas N. Oosterhof, n dot n dot oosterhof at googlemail dot com.</p>"},{"location":"contributors.html","title":"Contributions","text":"<p>Thanks to the following contributors:</p> <ul> <li>Scott Lowe</li> <li>Thomas Feher</li> <li>Joel LeBlanc</li> <li>Anderson Bravalheri</li> <li>Sven Baars</li> <li>'jdbancal'</li> <li>Marcin Konowalczyk</li> <li>Oliver Heimlich</li> </ul>"},{"location":"ci/github.html","title":"Github-CI","text":"<p>You can test your code with Octave or Matlab on Github.</p> <p>To use it, create a YML file in your <code>.github/workflows</code> with the content described in one of the following sections.</p> <p>Warning</p> <p>The example shown below is the one we use for the MOxUnit repository and may need some tweaking to work on yours.</p>"},{"location":"ci/github.html#octave","title":"Octave","text":""},{"location":"ci/github.html#using-the-moxunit-github-action","title":"Using the moxunit Github action","text":"<p>There is a \"preset\" github action will test your code with Ubuntu and Octave.</p> <pre><code>---\nname: CI octave action\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n    push:\n        branches: [master]\n    pull_request:\n        branches: [master]\n    workflow_dispatch:\n\n# cancel previous runs on the same branch / PR\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\njobs:\n\n    unit-tests:\n\n        runs-on: ubuntu-latest\n\n        steps:\n        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n        -   uses: actions/checkout@v5\n\n        # Use A Github Action to perform tests\n        -   name: run unit tests and documentation tests, generate coverage report\n            uses: joergbrech/moxunit-action@v1.1\n            with:\n                tests: tests\n                src: MOxUnit\n                with_coverage: true\n                doc_tests: true\n                cover_xml_file: coverage.xml\n\n        -   name: Store Coverage report as artifact\n            uses: actions/upload-artifact@v4\n            with:\n                name: coverage_xml_file\n                path: coverage.xml\n</code></pre>"},{"location":"ci/github.html#manual-set-up","title":"'Manual' set up","text":"<p>If you do not use the github action, you have to install octave and all the relevant toolboxes.</p> <pre><code>---\nname: CI octave\n\n# - Installs\n#   - octave\n#   - MOcov\n# - checks out MOXunit\n# - Runs tests\n# - If tests pass, uploads coverage to codecov\n\n# Controls when the action will run.\n# Triggers the workflow:\n#   - on push for the master branch\n#   - on pull request for all branches\non:\n    push:\n        branches: [master]\n    pull_request:\n        branches: ['*']\n\n# cancel previous runs on the same branch / PR\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\nenv:\n    OCTFLAGS: --no-gui --no-window-system --silent\n\njobs:\n    tests:\n        runs-on: ubuntu-latest\n        steps:\n        -   name: Checkout repository\n            uses: actions/checkout@v5\n        -   name: Install MOcov\n            run: |\n                git clone https://github.com/MOcov/MOcov.git --depth 1\n        -   name: Install Octave\n            run: |\n                sudo apt-get -y -qq update\n                sudo apt-get -y install \\\n                  octave octave-dev\n                make install\n                make -C MOcov install\n        -   name: Octave version\n            run: octave --version\n        -   name: Run tests\n            run: octave $OCTFLAGS --eval \"moxunit_runtests tests -verbose -with_coverage -cover MOxUnit -cover_xml_file coverage.xml; exit(double(~ans))\"\n\n\n        -   name: Code coverage\n            uses: codecov/codecov-action@v5\n            with:\n                files: coverage.xml\n                flags: octave\n                name: codecov-octave\n                fail_ci_if_error: false\n                token: ${{ secrets.CODECOV_TOKEN }}\n</code></pre>"},{"location":"ci/github.html#matlab","title":"Matlab","text":"<p>You can test your code with Matlab with several operating systems and Matlab versions.</p> <pre><code>---\nname: CI matlab\n\n# - Installs\n#   - MATLAB github action\n#   - MOcov\n# - checks out MOXunit\n# - Runs tests\n# - If tests pass, uploads coverage to codecov\n\n# Controls when the action will run.\n# Triggers the workflow:\n#   - on push for the master branch\n#   - on pull request for all branches\non:\n    push:\n        branches: [master]\n    pull_request:\n        branches: ['*']\n\n# cancel previous runs on the same branch / PR\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\njobs:\n\n    tests:\n\n        strategy:\n            matrix:\n                # Note that some older versions (e.g R2020a, R2020b...) may not be available on all OS\n                matlab_version: [R2022a, R2022b, R2023a, R2023b]\n                os: [ubuntu-latest, macos-latest, windows-latest]\n            fail-fast: false # Don't cancel all jobs if one fails\n\n        runs-on: ${{ matrix.os }}\n\n        steps:\n        # use matlab-actions/setup-matlab to setup a specific version of MATLAB\n        # https://github.com/matlab-actions/setup-matlab\n        -   name: Install MATLAB\n            uses: matlab-actions/setup-matlab@v2\n            with:\n                release: ${{ matrix.matlab_version }}\n        -   name: Checkout repository\n            uses: actions/checkout@v5\n        -   name: Install MOcov\n            run: |\n                git clone https://github.com/MOcov/MOcov.git --depth 1\n\n        # use matlab-actions/setup-matlab to run a matlab command\n        # https://github.com/matlab-actions/setup-matlab\n        -   name: Run tests\n            uses: matlab-actions/run-command@v2\n\n            # This command will call the script run_tests_gh_ci.m that will:\n            # - set up moxunit\n            # - add MOcov to the path\n            # - run the tests\n            # - exit with the result\n            with:\n                command: run run_tests_gh_ci;\n\n        -   name: Code coverage\n            uses: codecov/codecov-action@v5\n            with:\n                files: coverage.xml\n                flags: ${{ matrix.os }}_matlab-${{ matrix.matlab_version }}\n                name: codecov-matlab\n                fail_ci_if_error: false\n                token: ${{ secrets.CODECOV_TOKEN }}\n</code></pre> <p>Note that this wokflow calls the following script:</p> <pre><code>% Script used to run tests with github CI\n\nIS_CI = getenv('CI');\nif ~IS_CI\n    error('This script should only run in continuous integration.');\nend\n\ncd('MOxUnit');\nmoxunit_set_path();\ncd ..;\naddpath(fullfile(pwd, 'MOcov', 'MOcov'));\nmoxunit_runtests tests -verbose -with_coverage -cover MOxUnit -cover_xml_file coverage.xml;\nexit(double(~ans));\n</code></pre> <p>Warning</p> <p>You may need to use a slightly different <code>run_tests_gh_ci.m</code> by updating the values for <code>path/to/src</code> and <code>path/to/tests</code> to make sure it points to where your source code and tests are.</p> <pre><code>cd('./MOxUnit/MOxUnit/');\nmoxunit_set_path();\ncd ../..;\n\naddpath(fullfile(pwd, 'MOcov', 'MOcov'));\n\nmoxunit_runtests path/to/tests -verbose -with_coverage -cover path/to/src -cover_xml_file coverage.xml;\n\nexit(double(~ans))\n</code></pre> <p>Alternatively, the commands can be part of a CI*.yaml file. For example, CoSMoMVPA uses more or less the following configuration in <code>CI_matlab.yml</code> (for simplicity, the documentation tests are left out):</p> <pre><code>        steps:\n        # use matlab-actions/setup-matlab to setup a specific version of MATLAB\n        # https://github.com/matlab-actions/setup-matlab\n        -   name: Install MATLAB\n            uses: matlab-actions/setup-matlab@v2\n            with:\n                release: ${{ matrix.matlab_version }}\n\n        -   name: Checkout repository\n            uses: actions/checkout@v4\n\n        -   name: Install CoSMoMVPA\n            uses: matlab-actions/run-command@v2\n            with:\n                command: |\n                    cd('mvpa')\n                    cosmo_set_path()\n                    savepath()\n\n        -   name: Download MOxUnit, MOcov\n            run: |\n                git clone https://github.com/MOxUnit/MOxUnit.git --depth 1\n                git clone https://github.com/MOcov/MOcov.git --depth 1\n\n        -   name: Install MOxUnit, MOcov\n            uses: matlab-actions/run-command@v2\n            with:\n                command: |\n                    origin=pwd()\n                    disp('Current working directory and contents:')\n                    disp(origin)\n                    dir\n                    prefix=[origin '/']\n                    cd([prefix 'MOxUnit/MOxUnit']); moxunit_set_path()\n                    cd([prefix 'MOcov/MOcov']); addpath(pwd)\n                    savepath()\n                    disp('Path is now')\n                    disp(path)\n\n        -   name: Run unit tests (no documentation tests)\n            uses: matlab-actions/run-command@v2\n            with:\n                command: |\n                    result=moxunit_runtests('tests','-verbose', '-cover', 'mvpa', '-with_coverage', '-cover_xml_file', 'coverage.xml');\n                    exit(~result);\n\n        -   name: Code coverage\n            uses: codecov/codecov-action@v5\n            with:\n                files: coverage.xml\n                flags: ${{ matrix.os }}_matlab-${{ matrix.matlab_version }}\n                name: codecov-matlab\n                fail_ci_if_error: false\n                token: ${{ secrets.CODECOV_TOKEN }}\n</code></pre>"},{"location":"mocov/index.html","title":"MOcov","text":"<p>MOcov is a coverage report generator for Matlab and GNU-Octave.</p> <p>Features</p> <ul> <li>Runs on both the Matlab and GNU Octave platforms.</li> <li>Can be used directly with continuous integration services, such as coveralls.io.</li> <li>Integrates with MOxUnit, a unit test framework for Matlab and GNU Octave.</li> <li>Supports the Matlab profiler.</li> <li>Writes coverage reports in HTML, JSON and XML formats.</li> <li>Distributed under the MIT license, a permissive free software license.</li> </ul> <p>Compatibility notes</p> <ul> <li>Because GNU Octave 3.8 and 4.0 do not support <code>classdef</code> syntax,     'old-style' object-oriented syntax is used for the class definitions.</li> </ul> <p>Limitations</p> <ul> <li>The 'file' coverage method uses a very simple parser, which may not work as expected in all cases.</li> <li>Currently there is only support to generate coverage reports for files in a single directory (and its subdirectory).</li> </ul>"},{"location":"mocov/installation.html","title":"Installation","text":"<p>requirements</p> <ul> <li>Working installation of MOxUnit.</li> </ul>"},{"location":"mocov/installation.html#installation-using-the-shell","title":"Installation using the shell","text":"<p>requirements</p> <p>This requires a Unix-like operating system such as GNU/Linux or Apple OSX.</p> <pre><code>git clone https://github.com/MOcov/MOcov.git\ncd MOcov\nmake install\n</code></pre> <p>This will add the MOcov directory to the Matlab and/or GNU Octave search path. If both Matlab and GNU Octave are available on your machine, it will install MOcov for both.</p>"},{"location":"mocov/installation.html#manual-installation","title":"Manual installation","text":"<ul> <li> <p>Download the zip archive from the MOcov repository.</p> </li> <li> <p>Start Matlab or GNU Octave.</p> </li> <li> <p>On the Matlab or GNU Octave prompt, <code>cd</code> to the <code>MOcov</code> root directory, then run:</p> <pre><code>cd MOcov            % cd to MOcov subdirectory\naddpath(pwd)        % add the current directory to the Matlab/GNU Octave path\nsavepath            % save the path\n</code></pre> </li> </ul>"},{"location":"mocov/usage.html","title":"Usage","text":""},{"location":"mocov/usage.html#determining-coverage","title":"Determining coverage","text":"<p>Coverage can be determined for evaluating a single expression or evaluation of a single function handle; for typical use cases this invokes running a test suite.</p> <p>There are two methods to generate coverage while evaluating such an expression or function handle.</p>"},{"location":"mocov/usage.html#using-the-file-method","title":"Using the 'file' method","text":"<p>This is the default method used.</p> <ul> <li> <p>Coverage information is stored internally by the function <code>mocov_line_covered</code>,     which keeps this information through the use of persistent variables.     Initially the coverage information is reset to being empty.</p> </li> <li> <p>This method considers all files in a directory (and its subdirectories).</p> </li> <li> <p>A temporary directory is created where modified versions of each file is stored.</p> </li> <li> <p>Prior to evaluating the expression or function handle, for each file, MOcov determines which of its lines can be executed.     Each line that can be executed is prefixed by a call to <code>mocov_line_covered</code>,     which cause it to update internal state to record the filename and line number that was executed,     and the result stored in the temporary directory.</p> </li> <li> <p>The search path is updated to include the new temporary directory.</p> </li> </ul> <p>After evaluating the expression or function handle, the temporary directory is deleted and the search path restored. Line coverage information is then extracted from the internal state of <code>mocov_line_covered</code>.</p> <p>This method runs on both GNU Octave and Matlab, but is typically slow.</p>"},{"location":"mocov/usage.html#using-the-profile-method","title":"Using the 'profile' method","text":"<ul> <li>It uses the Matlab profiler.</li> <li>This method runs on Matlab only (not on GNU Octave), but is generally faster.</li> </ul>"},{"location":"mocov/usage.html#use-cases","title":"Use cases","text":"<p>Typical use cases for MOcov are:</p> <ul> <li> <p>Locally run code with coverage for code in a unit test framework on GNU Octave or Matlab.     Use</p> <pre><code>mocov(  '-cover','path/with/code', ...\n        '-expression','run_test_command', ...\n        '-cover_json_file','coverage.json', ...\n        '-cover_xml_file','coverage.xml', ...\n        '-cover_html_dir','coverage_html', ...\n        '-method','file');\n</code></pre> <p>to generate coverage reports for all files in the <code>'path/with/code'</code> directory when <code>running eval('run_test_command')</code>. Results are stored in JSON, XML and HTML formats.</p> </li> <li> <p>As a specific example of the use case above,     when using the MOxUnit unit test platform such tests can be run as</p> <pre><code>success = moxunit_runtests( 'path/with/tests', ...\n                            '-with_coverage', ...\n                            '-cover','/path/with/code', ...\n                            '-cover_xml_file','coverage.xml', ...\n                            '-cover_html_dir','coverage_html');\n</code></pre> <p>where <code>'path/with/tests'</code> contains unit tests. In this case, <code>moxunit_runtests</code> will call the <code>mocov</code> function to generate coverage reports.</p> </li> <li> <p>On the Matlab platform, results from <code>profile('info')</code>     can be stored in JSON, XML or HTML formats directly.     In the following:</p> <pre><code>% enable profiler\nprofile on;\n\n% run code for which coverage is to be determined\n&lt;your code here&gt;\n\n% write coverage based on profile('info')\nmocov(  '-cover','path/with/code',...\n        '-profile_info',...\n        '-cover_json_file','coverage.json',...\n        '-cover_xml_file','coverage.xml',...\n        '-cover_html_dir','coverage_html');\n</code></pre> <p>coverage results are stored in JSON, XML and HTML formats.</p> </li> <li> <p>Use with continuous integration service,     such as travis-ci combined with coveralls.io.     See the [travis.yml configuration file] in the MOxUnit project for an example.</p> </li> </ul>"},{"location":"mocov/usage.html#use-with-travis-ci","title":"Use with travis-ci","text":"<p>MOcov can be used with the Travis-ci  services for continuous integration testing. This is achieved by setting up a <code>travis.yml</code> file. Due to recursiveness issues, MOcov cannot use these services to generate coverage reports for itself; for an example in the related MOxUnit project, see the [travis.yml configuration file] file.</p>"},{"location":"modox/index.html","title":"Modox","text":"<p>MOdox is documentation test (\"doctest\") framework for Matlab and GNU Octave.</p> <p>Features</p> <ul> <li>Runs on both the Matlab and GNU Octave platforms.</li> <li>Can be used directly with continuous integration services, such as coveralls.io.</li> <li>Extends MOxUnit, a unit test framework for Matlab and GNU Octave.</li> </ul> <p>Compatibility notes</p> <ul> <li>Because GNU Octave 3.8 and 4.0 do not support <code>classdef</code> syntax, 'old-style' object-oriented syntax is used for the class definitions.</li> </ul> <p>Limitations</p> <ul> <li>Expressions with the \"for\" keyword are not supported in Octave because <code>evalc</code> does not seem to support it</li> <li>It is possible to indicate that an expression throws an exception, but not which exception.</li> </ul>"},{"location":"modox/index.html#use-with-travis-ci","title":"Use with travis-ci","text":"<p>MOdox can be used with the Travis-ci services for continuous integration testing. This is achieved by setting up a <code>travis.yml</code> file. For an example in the related MOxUnit project, see the [MOxUnit travis.yml] file.</p>"},{"location":"modox/installation.html","title":"Installation","text":"<p>requirements</p> <ul> <li>Working installation of MOxUnit.</li> <li>The <code>evalc</code> function.     This functoon is generally available in Matlab, and in GNU Octave from version 4.2 onwards.     Older versions of Octave without <code>evalc</code> can compile the <code>evalc.cc</code> file from in the \"externals\" directory.     This can be done by running <code>make build-octave</code> from the shell,     or in Octave by running <code>mkoctfile('evalc.cc')</code> in the <code>externals</code> directory     and then adding that directory to the search path.     The <code>evalc.cc</code> implementation is Copyright 2015 Oliver Heimlich, distributed under the GPL v3+ license.</li> </ul>"},{"location":"modox/installation.html#installation-using-the-shell","title":"Installation using the shell","text":"<p>requirements</p> <p>This requires a Unix-like operating system such as GNU/Linux or Apple OSX.</p> <pre><code>git clone https://github.com/MOdox/MOdox.git\ncd MOdox\nmake install\n</code></pre> <p>This will add the MOdox directory to the Matlab and/or GNU Octave search path. If both Matlab and GNU Octave are available on your machine, it will install MOdox for both.</p>"},{"location":"modox/installation.html#manual-installation","title":"Manual installation","text":"<ul> <li> <p>Download the zip archive from the MOdox repository.</p> </li> <li> <p>Start Matlab or GNU Octave.</p> </li> <li> <p>On the Matlab or GNU Octave prompt, <code>cd</code> to the <code>MOdox</code> root directory, then run:</p> <pre><code>cd MOdox            % cd to MOdox subdirectory\naddpath(pwd)        % add the current directory to the Matlab/GNU Octave path\nsavepath            % save the path\n</code></pre> </li> </ul>"},{"location":"modox/usage.html","title":"Usage","text":""},{"location":"modox/usage.html#writing-documentation-tests","title":"Writing documentation tests","text":"<p>Documentation tests can be defined in the help section of a Matlab / Octave .m file. The help section of a function \"foo\" is the text shown when running \"help foo\".</p> <p>Documentation tests must be placed in an example section starting with a header that consists of exactly one of the strings (optionally surrounded by whitespace):</p> <ul> <li><code>Example</code></li> <li><code>Examples</code></li> <li><code>Example:</code></li> <li><code>Examples:</code></li> </ul> <p>Subsequent lines, if indented (by being prefixed by more whitespace than the example header), are used to construct documentation tests.</p> <p>The examples section ends when the indentation is back to the original level.</p> <p>Multiple test sections can be defined by separating them by whitespace.</p> <p>Each tests contains one or more Matlab epxressions, and one or more lines containing expected output. Expected output is prefixed by <code>%||</code>; this ensures that documentation tests can be run by using copy-pasting code fragments.</p> <p>If a potential test section does not have expected output, then it is ignored (and not used to construct a test).</p> <p>In the following example, a file \"foo.m\" defines two documentation tests:</p> <pre><code>function foo()\n    % This function illustrates a documentation test defined for MOdox.\n    % Other than that it does absolutely nothing\n    %\n    % Examples:\n    %   a=2;\n    %   disp(a)\n    %   % Expected output is prefixed by '%||' as in the following line:\n    %   %|| 2\n    %   %\n    %   % The test continues because no interruption through whitespace,\n    %   % as the previous line used a '%' comment character;\n    %   % thus the 'a' variable is still in the namespace and can be\n    %   % accessed.\n    %   b=3+a;\n    %   disp(a+[3 4])\n    %   %|| [5 6]\n    %\n    %   % A new test starts here because the previous line was white-space\n    %   % only. Thus the 'a' and 'b' variables are not present here anymore.\n    %   % The following expression raises an error because the 'b' variable\n    %   % is not defined (and does not carry over from the previous test).\n    %   % Because the expected output indicates an error as well,\n    %   % the test passes\n    %   disp(b)\n    %   %|| error('Some error')\n    %\n    %   % A set of expressions is ignored if there is no expected output\n    %   % (that is, no lines starting with '%||').\n    %   % Thus, the following expression is not part of any test,\n    %   % and therefore does not raise an error.\n    %   error('this is never executed)\n    %\n    %\n    % tests end here because test indentation has ended\n</code></pre>"},{"location":"modox/usage.html#running-documentation-tests","title":"Running documentation tests","text":"<p>Tests can be run using the <code>modox</code> function. For example, to run the documentation test defined above (in file foo.m):</p> <pre><code>modox foo.m\n</code></pre> <p>The <code>modox</code> accepts as input arguments both single .m files and directories with m files. If no .m files or directories are given, it runs tests on all .m files in the current directory.</p>"},{"location":"moxunit/index.html","title":"MOxUnit","text":"<p>MOxUnit is a lightweight testing framework for Matlab and GNU Octave.</p> <p>Features</p> <ul> <li>Runs on both the Matlab and GNU Octave platforms.</li> <li>Can be used directly with continuous integration services, such as GitHub, Travis-ci.</li> <li>Uses object-oriented TestCase, TestSuite and TestResult classes, allowing for user-defined extensions.</li> <li>Supports JUnit-like XML output for use test results visualization approaches.</li> <li>Supports the generation of code coverage reports using MOCov.</li> <li>Supports documentation tests using MOdox.</li> <li>Provides compatibility with the (now unsupported) Steve Eddin's Matlab xUnit test framework, and with recent Matlab test functionality.</li> </ul> <p>Limitations</p> <p>Currently MOxUnit does not support:</p> <ul> <li>Support for setup and teardown functions in <code>TestCase</code> classes.</li> <li>Subclasses of MOxUnit's classes (<code>MOxUnitTestCase</code>, <code>MOxUnitTestSuite</code>, <code>MOxUnitTestReport</code>) have to be defined using \"old-style\" object-oriented syntax.</li> <li>Subtests</li> </ul>"},{"location":"moxunit/installation.html","title":"Installation","text":""},{"location":"moxunit/installation.html#installation-using-the-shell","title":"Installation using the shell","text":"<p>requirements</p> <p>This requires a Unix-like operating system such as GNU/Linux or Apple OSX.</p> <pre><code>git clone https://github.com/MOxUnit/MOxUnit.git\ncd MOxUnit\nmake install\n</code></pre> <p>This will add the MOxUnit directory to the Matlab and/or GNU Octave searchpath. If both Matlab and GNU Octave are available on your machine, it will install MOxUnit for both.</p>"},{"location":"moxunit/installation.html#manual-installation","title":"Manual installation","text":"<ul> <li> <p>Download the MOxUnit zip archive from the MOxUnit repository, and extract it.     This should result in a directory called <code>MOxUnit-master</code>.</p> </li> <li> <p>Start Matlab or GNU Octave.</p> </li> <li> <p>On the Matlab or GNU Octave prompt, go to the directory that contains the new <code>MOxUnit-master</code> directory, then run:</p> <pre><code>% change to the MOxUnit subdirectory\n%\n% Note: if MOxUnit was retrieved using 'git', then the name of\n%       top-level directory is 'MOxUnit', not 'MOxUnit-master'\ncd MOxUnit-master/MOxUnit\n\n% add the current directory to the Matlab/GNU Octave path\nmoxunit_set_path()\n\n% save the path\nsavepath\n</code></pre> </li> </ul>"},{"location":"moxunit/usage.html","title":"Usage","text":""},{"location":"moxunit/usage.html#defining-moxunit-tests","title":"Defining MOxUnit tests","text":"<p>To define unit tests, write a function with the following header:</p> <pre><code>function test_suite=test_of_abs\n    try % assignment of 'localfunctions' is necessary in Matlab &gt;= 2016\n        test_functions=localfunctions();\n    catch % no problem; early Matlab versions can use initTestSuite fine\n    end\n    initTestSuite;\n</code></pre>"},{"location":"moxunit/usage.html#important","title":"Important","text":"<ul> <li>It is crucial that the output of the main function is a variable named <code>test_suite</code>, and that the output of <code>localfunctions</code> is assigned to a variable named <code>test_functions</code>.</li> <li>As of Matlab 2016b, Matlab scripts (such as <code>initTestSuite.m</code>) do not have access to subfunctions in a function if called from that function. Therefore it requires using localfunctions to obtain function handles to local functions. The \"try-catch-end\" statements are necessary for compatibility with older versions of GNU Octave, which do not provide the <code>localfunctions</code> function.</li> <li>Alas, the call to <code>localfunctions</code> cannot be incorporated into <code>initTestSuite</code> so the entire code snippet above has to be the header of each test file</li> </ul> <p>Then, define subfunctions whose name start with <code>test</code> or end with <code>test</code> (case-insensitive). These functions can use the following <code>assert*</code> functions:</p> <ul> <li><code>assertTrue(a)</code>: assert that <code>a</code> is true.</li> <li><code>assertFalse(a)</code>: assert that <code>a</code> is false.</li> <li><code>assertEqual(a,b)</code>: assert that <code>a</code> and <code>b</code> are equal.</li> <li><code>assertElementsAlmostEqual(a,b)</code>: assert that the floating point arrays <code>a</code> and <code>b</code> have the same size, and that corresponding elements are equal within some numeric tolerance.</li> <li><code>assertVectorsAlmostEqual(a,b)</code>: assert that floating point vectors <code>a</code> and <code>b</code> have the same size, and are equal within some numeric tolerance based on their vector norm.</li> <li><code>assertExceptionThrown(f,id)</code>: assert that calling <code>f()</code> throws an exception with identifier <code>id</code>. (To deal with cases where Matlab and GNU Octave throw errors with different identifiers, use <code>moxunit_util_platform_is_octave</code>. Or use <code>id='*'</code> to match any identifier).</li> </ul> <p>As a special case, <code>moxunit_throw_test_skipped_exception('reason')</code> throws an exception that is caught when running the test; <code>moxunit_run_tests</code> will report that the test is skipped for reason <code>reason</code>.</p> <p>For example, the following function defines three unit tests that tests some possible inputs from the builtin <code>abs</code> function:</p> <pre><code>function test_suite=test_of_abs\n    try % assignment of 'localfunctions' is necessary in Matlab &gt;= 2016\n        test_functions=localfunctions();\n    catch % no problem; early Matlab versions can use initTestSuite fine\n    end\n    initTestSuite;\n\nfunction test_abs_scalar\n    assertTrue(abs(-1)==1)\n    assertEqual(abs(-NaN),NaN);\n    assertEqual(abs(-Inf),Inf);\n    assertEqual(abs(0),0)\n    assertElementsAlmostEqual(abs(-1e-13),0)\n\nfunction test_abs_vector\n    assertEqual(abs([-1 1 -3]),[1 1 3]);\n\nfunction test_abs_exceptions\n    % GNU Octave and Matlab use different error identifiers\n    if moxunit_util_platform_is_octave()\n        assertExceptionThrown(@()abs(struct),'');\n    else\n        assertExceptionThrown(@()abs(struct),...\n                             'MATLAB:UndefinedFunction');\n    end\n</code></pre> <p>Examples of unit tests are in MOxUnit's <code>tests</code> directory, which test some of MOxUnit's functions itself.</p>"},{"location":"moxunit/usage.html#running-moxunit-tests","title":"Running MOxUnit tests","text":"<ul> <li> <p><code>cd</code> to the directory where the unit tests reside. For MOxUnit itself, the unit tests are in the directory <code>tests</code>.</p> </li> <li> <p>run the tests using <code>moxunit_runtests</code>. For example, running <code>moxunit_runtests</code> from MOxUnit's <code>tests</code> directory runs tests for MOxUnit itself, and should give the following output:</p> <pre><code>&gt;&gt; moxunit_runtests\nsuite: 98 tests\n............................................................\n......................................\n--------------------------------------------------\n\n  OK (passed=98)\n  ans =\n    logical\n    1\n</code></pre> </li> <li> <p><code>moxunit_runtests</code>, by default, gives non-verbose output and runs all tests in the current directory. This can be changed using the following arguments:</p> <ul> <li><code>-verbose</code>: show verbose output.</li> <li><code>-quiet</code>: suppress all output</li> <li><code>directory</code>: run unit tests in directory <code>directory</code>.</li> <li><code>file.m</code>: run unit tests in file <code>file.m</code>.</li> <li><code>-recursive</code>: add files from directories recursively.</li> <li><code>-logfile logfile.txt</code>: store the output in file <code>logfile.txt</code>.</li> <li><code>-junit_xml_file xmlfile</code>: store JUnit-like XML output in file <code>xmlfile</code>.</li> </ul> </li> <li> <p>To test MOxUnit itself from a terminal, run:</p> <pre><code>make test\n</code></pre> </li> </ul>"},{"location":"moxunit/usage.html#compatibility-notes","title":"Compatibility notes","text":"<ul> <li> <p>Because GNU Octave 3.8 does not support <code>classdef</code> syntax, 'old-style' object-oriented syntax is used for the class definitions. For similar reasons, MOxUnit uses the <code>lasterror</code> function, even though its use in Matlab is discouraged.</p> </li> <li> <p>Recent versions of Matlab (2016 and later) do not support tests defined just using \"initTestSuite\", that is without the use of <code>localfunctions</code> (see above). To ease the transition, consider using the Python script <code>tools/fix_mfile_test_init.py</code>, which can update existing .m files that do not use <code>localfunctions</code>.</p> <p>For example, the following command was used on a Unix-like shell to preview changes to MOxUnit's tests:</p> <pre><code>  find tests -iname 'test*.m' | xargs -L1 tools/fix_mfile_test_init.py\n</code></pre> <p>and adding the <code>--apply</code> option applies these changes, meaning that found files are rewritten:</p> <pre><code>  find tests -iname 'test*.m' | xargs -L1 tools/fix_mfile_test_init.py --apply\n</code></pre> </li> <li> <p>Recent versions of Matlab define a <code>matlab.unittest.Test</code> class for unit tests. An instance <code>t</code> can be used with MOxUnit using the <code>MOxUnitMatlabUnitWrapperTestCase(t)</code>, which is a <code>MOxUnitTestCase</code> instance. Tests that are defined through</p> <pre><code>function tests=foo()\n   tests=functiontests(localfunctions)\n\nfunction test_funcA(param)\n\nfunction test_funcA(param)\n</code></pre> <p>can be run using MOxUnit as well (and included in an <code>MOxUnitTestSuite</code> instance using its with <code>addFile</code>) instance, with the exception that currently setup and teardown functions are currently ignored.</p> </li> </ul>"}]}